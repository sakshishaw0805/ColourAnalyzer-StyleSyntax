<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>py</title>
    <link rel="stylesheet" href="https://pyscript.net/alpha/pyscript.css" />
    <script defer src="https://pyscript.net/alpha/pyscript.js"></script>
    <py-env>
        - numpy
        - cv2
        - matplotlib
        - colormath
        - colorthief
  </py-env>
</head>
<body>
    <py-script>
import cv2
import numpy as np
import matplotlib.pyplot as plt
from colormath.color_objects import LabColor
from colormath.color_diff import delta_e_cie2000
from colormath.color_conversions import convert_color
from colorthief import ColorThief

# Define color palettes for the 12 Season Color Theory
spring_palette = [
    "#FFD700", "#FF8C00", "#FF4500", "#FFA07A", "#98FB98", "#00FA9A",
    "#8FBC8F", "#3CB371", "#20B2AA", "#87CEEB", "#4682B4", "#B0E0E6"
]

summer_palette = [
    "#87CEFA", "#87CEEB", "#00CED1", "#48D1CC", "#40E0D0", "#AFEEEE",
    "#5F9EA0", "#4682B4", "#B0C4DE", "#ADD8E6", "#B0E0E6", "#E0FFFF"
]

autumn_palette = [
    "#FF4500", "#FF8C00", "#FFA500", "#FFD700", "#FFFF00", "#F4A460",
    "#D2B48C", "#DEB887", "#CD853F", "#A0522D", "#8B4513", "#800000"
]

winter_palette = [
    "#191970", "#000080", "#00008B", "#0000CD", "#0000FF", "#4169E1",
    "#6495ED", "#B0C4DE", "#778899", "#708090", "#2F4F4F", "#00CED1"
]

# Define a list of named colors and their RGB values
named_colors = {
    "White": (255, 255, 255),
    "Black": (0, 0, 0),
    "Red": (255, 0, 0),
    "Green": (0, 255, 0),
    "Blue": (0, 0, 255),
    "Yellow": (255, 255, 0),
    "Orange": (255, 165, 0),
    "Purple": (128, 0, 128),
    "Pink": (255, 192, 203),
    "Brown": (165, 42, 42),
    "Gray": (128, 128, 128),
    # Add more colors as needed
}

# Custom color name dictionary for additional colors
custom_color_names = {
    "#e8d2c8": "Beige",
    "#ccb4a5": "Sandstone",
    "#b18e82": "Clay",
    "#7b6355": "Tobacco",
    "#2f2828": "Charcoal",
}

def rgb_to_hex(color):
    return "#{:02x}{:02x}{:02x}".format(int(color[0]), int(color[1]), int(color[2]))

def hex_to_rgb(hex_color):
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

def closest_color(requested_color):
    closest_color = None
    min_distance = float('inf')

    for name, color in named_colors.items():
        r_c, g_c, b_c = color
        rd = (r_c - requested_color[0]) ** 2
        gd = (g_c - requested_color[1]) ** 2
        bd = (b_c - requested_color[2]) ** 2
        distance = rd + gd + bd

        if distance < min_distance:
            min_distance = distance
            closest_color = name

    return closest_color

def analyze_colors(frame, top_colors=5):
    # Convert frame to RGB
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Reshape image to a list of pixels
    pixels = np.float32(image.reshape(-1, 3))

    # Define criteria, number of clusters(K) and apply kmeans()
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)
    k = top_colors
    _, labels, palette = cv2.kmeans(pixels, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

    # Count each cluster center
    _, counts = np.unique(labels, return_counts=True)

    # Sort the palette and counts by the number of pixels in each cluster
    sorted_indices = np.argsort(-counts)
    palette = palette[sorted_indices]
    counts = counts[sorted_indices]

    # Convert the palette to hex colors
    hex_colors = [rgb_to_hex(color) for color in palette]

    return palette, hex_colors, counts

def plot_colors(palette, hex_colors, counts):
    plt.figure(figsize=(8, 6))
    plt.pie(counts, labels=hex_colors, colors=hex_colors, startangle=90)
    plt.axis('equal')
    plt.show()

def find_season(color):
    # For simplicity, this function uses only one color per season as a representative
    # You can expand it to use more colors for better accuracy
    season_colors = {
        "Spring": (255, 223, 0),  # Yellow
        "Summer": (135, 206, 250),  # Light Blue
        "Autumn": (255, 69, 0),  # Orange
        "Winter": (25, 25, 112)  # Midnight Blue
    }
    
    def euclidean_distance(c1, c2):
        return sum((a - b) ** 2 for a, b in zip(c1, c2)) ** 0.5
    
    closest_season = min(season_colors, key=lambda s: euclidean_distance(color, season_colors[s]))
    return closest_season

def suggest_colors(color):
    season = find_season(color)
    palettes = {
        "Spring": spring_palette,
        "Summer": summer_palette,
        "Autumn": autumn_palette,
        "Winter": winter_palette
    }
    return season, palettes[season]

# Initialize webcam capture
cap = cv2.VideoCapture(0)

captured = False
while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to capture frame from webcam. Exiting...")
        break
    
    # Display the frame with color analysis results
    cv2.imshow('Color Analysis from Webcam', frame)
    
    if captured:
        # Analyze colors in the captured frame
        palette, hex_colors, counts = analyze_colors(frame)
        
        # Display results
        print("Top colors (RGB):", palette)
        print("Top colors (Hex):", hex_colors)
        plot_colors(palette, hex_colors, counts)

        # Get the most dominant color
        dominant_color_rgb = palette[0]

        season, suggested_palette = suggest_colors(dominant_color_rgb)
        print(f"The dominant color is best suited to the {season} palette.")
        print("Suggested colors from this palette:")
        for hex_color in suggested_palette:
            print(hex_color)

        # Convert hex colors to color names
        print("Top colors (Hex):", hex_colors)
        color_names = []
        for hex_color in hex_colors:
            # First check in custom dictionary
            if hex_color in custom_color_names:
                color_names.append(custom_color_names[hex_color])
            else:
                # If not found, use closest color from named_colors dictionary
                color_names.append(closest_color(hex_to_rgb(hex_color)))

        print("Top colors (Names):", color_names)
        
        break
    
    # Convert hex colors to color names
    # print("Top colors (Hex):", hex_colors)
    # color_names = []
    # for hex_color in hex_colors:
    #     # First check in custom dictionary
    #     if hex_color in custom_color_names:
    #         color_names.append(custom_color_names[hex_color])
    #     else:
    #         # If not found, use closest color from named_colors dictionary
    #         color_names.append(closest_color(hex_to_rgb(hex_color)))

    # Check for key press events
    key = cv2.waitKey(1) & 0xFF
    if key == 27:  # ESC key
        break
    elif key == 32:  # Spacebar
        captured = True

# Release webcam and close windows
cap.release()
cv2.destroyAllWindows()
    </py-script>
    
</body>
</html>